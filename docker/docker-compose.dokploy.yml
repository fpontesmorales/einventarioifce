services:
  postgres:
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - einv-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 10

  web:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    working_dir: /app
    environment:
      # --- Django / proxy / paths ---
      - SECRET_KEY
      - DEBUG
      - ALLOWED_HOSTS
      - CSRF_TRUSTED_ORIGINS
      - TIME_ZONE
      - USE_X_FORWARDED_HOST=1
      - STATIC_ROOT=/app/staticfiles
      - MEDIA_ROOT=/app/media

      # --- Credenciais do banco (propagadas ao web) ---
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD

      # --- Formatos aceitos pelo settings.py ---
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME
      - DB_USER
      - DB_PASSWORD
      - DATABASE_URL

      # --- Fallback direto para o driver (manage.py) ---
      - PGHOST=postgres
      - PGPORT=5432
      - PGDATABASE
      - PGUSER
      - PGPASSWORD

      # --- Sem TLS interno ---
      - SESSION_COOKIE_SECURE=0
      - CSRF_COOKIE_SECURE=0
      - SECURE_SSL_REDIRECT=0

    command: >-
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             exec gunicorn einventarioifce.wsgi:application -b 0.0.0.0:8000 -w 3 --timeout 600"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    networks:
      - einv-net

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      - web
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/static:ro
      - media_volume:/media:ro
    networks:
      - einv-net
      - dokploy-network

    # >>> DEBUG opcional: acesso direto ao Nginx sem Traefik (retire depois se quiser)
    ports:
      - "18080:80"

    labels:
      traefik.enable: "true"

      # --- Regra ampla: aceita QUALQUER host e caminho ---
      traefik.http.routers.einventario.rule: PathPrefix(`/`)
      traefik.http.routers.einventario.entrypoints: web
      traefik.http.routers.einventario.priority: "1"

      # --- Service (porta do nginx no container) ---
      traefik.http.routers.einventario.service: einventario
      traefik.http.services.einventario.loadbalancer.server.port: "80"

      # --- Garanta a rede vista pelo Traefik ---
      traefik.docker.network: dokploy-network

      # --- ServersTransport (timeouts corretos p/ esta vers√£o do Traefik) ---
      traefik.http.services.einventario.loadbalancer.serversTransport: einv-transport
      traefik.http.serversTransports.einv-transport.forwardingTimeouts.dialTimeout: "60s"
      traefik.http.serversTransports.einv-transport.forwardingTimeouts.responseHeaderTimeout: "600s"
      traefik.http.serversTransports.einv-transport.forwardingTimeouts.idleConnTimeout: "600s"
      traefik.http.serversTransports.einv-transport.maxIdleConnsPerHost: "1024"

volumes:
  pg_data:
  static_volume:
  media_volume:

networks:
  einv-net:
    driver: bridge
  dokploy-network:
    external: true
